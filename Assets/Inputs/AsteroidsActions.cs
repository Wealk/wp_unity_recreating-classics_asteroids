//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Inputs/AsteroidsActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AsteroidsActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AsteroidsActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AsteroidsActions"",
    ""maps"": [
        {
            ""name"": ""Player1"",
            ""id"": ""1fb86dfc-0062-4e6c-a38e-1e64bf4d22d4"",
            ""actions"": [
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""1ba11d70-ee60-417e-892f-700cbfb102ef"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Impulse"",
                    ""type"": ""Button"",
                    ""id"": ""4c144ac7-9f55-42e5-85d9-5b7cd3eb8f49"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""c4bb210c-9718-4aa1-8f19-ca18f8cbd930"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hyperspace"",
                    ""type"": ""Button"",
                    ""id"": ""dee263e3-e902-476f-8b53-cf636e80b3b2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AD"",
                    ""id"": ""07ec94f1-8310-4c23-a002-813ef053b3b3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""cea52d27-b7de-4230-9821-b7931263cd3c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e44515eb-1276-438d-884a-7f37ed5a73ac"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9c8065fb-8a46-48e9-a169-a64621793ab0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Impulse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""731d1f24-7dd0-474b-a401-0d43e66c0227"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f1a438f-dd29-4f75-b399-ffe9666627e2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hyperspace"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player2"",
            ""id"": ""9a417031-f3d7-49d9-83a7-1da842cdb070"",
            ""actions"": [
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""670aec72-291c-4f3b-9bf7-4c46b3089209"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Impulse"",
                    ""type"": ""Button"",
                    ""id"": ""8bb5e524-1b50-48b0-a8ea-af012360f8a0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""2e4ec743-e648-4dcf-9a2e-38d20ceb497c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hyperspace"",
                    ""type"": ""Button"",
                    ""id"": ""1dcdd8d7-11cd-412c-95ca-43e6d1ac42aa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""29385f19-5878-4416-a187-3513e675982b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Impulse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b257c13-5bfb-4205-96e4-215abd23a415"",
                    ""path"": ""<Keyboard>/rightCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f1aabb5-f603-4493-af94-b35a85f0c377"",
                    ""path"": ""<Keyboard>/rightShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hyperspace"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""2b07ba59-ac24-43ba-ba7d-ef41d2b22972"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d4020a3f-49a8-447a-ba7e-65514a0400c0"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""74d11e0b-c37f-4e20-9a6e-95d384325dfb"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Game"",
            ""id"": ""c56767a5-8e27-49ad-b921-6fecacbe8d38"",
            ""actions"": [
                {
                    ""name"": ""Player1Start"",
                    ""type"": ""Button"",
                    ""id"": ""c92345c9-e032-4354-8bc9-03aeb89b109f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Player2Start"",
                    ""type"": ""Button"",
                    ""id"": ""c9946c14-3f05-4fa3-ba65-b1735f29f4af"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c9ff7c15-6d37-4ec6-8f4c-adaebe0aed14"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8f8c84f-3ed2-4ac4-b772-961ba732635c"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""End"",
            ""id"": ""e14a1ba9-deb7-4bba-84b2-845fd90026fd"",
            ""actions"": [
                {
                    ""name"": ""Continue"",
                    ""type"": ""Button"",
                    ""id"": ""be9cade7-b681-4090-8c0f-17c614833880"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""af438ef9-4e09-4c2a-a0d0-18f17c5a871d"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player1
        m_Player1 = asset.FindActionMap("Player1", throwIfNotFound: true);
        m_Player1_Rotation = m_Player1.FindAction("Rotation", throwIfNotFound: true);
        m_Player1_Impulse = m_Player1.FindAction("Impulse", throwIfNotFound: true);
        m_Player1_Shoot = m_Player1.FindAction("Shoot", throwIfNotFound: true);
        m_Player1_Hyperspace = m_Player1.FindAction("Hyperspace", throwIfNotFound: true);
        // Player2
        m_Player2 = asset.FindActionMap("Player2", throwIfNotFound: true);
        m_Player2_Rotation = m_Player2.FindAction("Rotation", throwIfNotFound: true);
        m_Player2_Impulse = m_Player2.FindAction("Impulse", throwIfNotFound: true);
        m_Player2_Shoot = m_Player2.FindAction("Shoot", throwIfNotFound: true);
        m_Player2_Hyperspace = m_Player2.FindAction("Hyperspace", throwIfNotFound: true);
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_Player1Start = m_Game.FindAction("Player1Start", throwIfNotFound: true);
        m_Game_Player2Start = m_Game.FindAction("Player2Start", throwIfNotFound: true);
        // End
        m_End = asset.FindActionMap("End", throwIfNotFound: true);
        m_End_Continue = m_End.FindAction("Continue", throwIfNotFound: true);
    }

    ~@AsteroidsActions()
    {
        UnityEngine.Debug.Assert(!m_Player1.enabled, "This will cause a leak and performance issues, AsteroidsActions.Player1.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Player2.enabled, "This will cause a leak and performance issues, AsteroidsActions.Player2.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Game.enabled, "This will cause a leak and performance issues, AsteroidsActions.Game.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_End.enabled, "This will cause a leak and performance issues, AsteroidsActions.End.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player1
    private readonly InputActionMap m_Player1;
    private List<IPlayer1Actions> m_Player1ActionsCallbackInterfaces = new List<IPlayer1Actions>();
    private readonly InputAction m_Player1_Rotation;
    private readonly InputAction m_Player1_Impulse;
    private readonly InputAction m_Player1_Shoot;
    private readonly InputAction m_Player1_Hyperspace;
    public struct Player1Actions
    {
        private @AsteroidsActions m_Wrapper;
        public Player1Actions(@AsteroidsActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotation => m_Wrapper.m_Player1_Rotation;
        public InputAction @Impulse => m_Wrapper.m_Player1_Impulse;
        public InputAction @Shoot => m_Wrapper.m_Player1_Shoot;
        public InputAction @Hyperspace => m_Wrapper.m_Player1_Hyperspace;
        public InputActionMap Get() { return m_Wrapper.m_Player1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player1Actions set) { return set.Get(); }
        public void AddCallbacks(IPlayer1Actions instance)
        {
            if (instance == null || m_Wrapper.m_Player1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player1ActionsCallbackInterfaces.Add(instance);
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @Impulse.started += instance.OnImpulse;
            @Impulse.performed += instance.OnImpulse;
            @Impulse.canceled += instance.OnImpulse;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Hyperspace.started += instance.OnHyperspace;
            @Hyperspace.performed += instance.OnHyperspace;
            @Hyperspace.canceled += instance.OnHyperspace;
        }

        private void UnregisterCallbacks(IPlayer1Actions instance)
        {
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @Impulse.started -= instance.OnImpulse;
            @Impulse.performed -= instance.OnImpulse;
            @Impulse.canceled -= instance.OnImpulse;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Hyperspace.started -= instance.OnHyperspace;
            @Hyperspace.performed -= instance.OnHyperspace;
            @Hyperspace.canceled -= instance.OnHyperspace;
        }

        public void RemoveCallbacks(IPlayer1Actions instance)
        {
            if (m_Wrapper.m_Player1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer1Actions instance)
        {
            foreach (var item in m_Wrapper.m_Player1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player1Actions @Player1 => new Player1Actions(this);

    // Player2
    private readonly InputActionMap m_Player2;
    private List<IPlayer2Actions> m_Player2ActionsCallbackInterfaces = new List<IPlayer2Actions>();
    private readonly InputAction m_Player2_Rotation;
    private readonly InputAction m_Player2_Impulse;
    private readonly InputAction m_Player2_Shoot;
    private readonly InputAction m_Player2_Hyperspace;
    public struct Player2Actions
    {
        private @AsteroidsActions m_Wrapper;
        public Player2Actions(@AsteroidsActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotation => m_Wrapper.m_Player2_Rotation;
        public InputAction @Impulse => m_Wrapper.m_Player2_Impulse;
        public InputAction @Shoot => m_Wrapper.m_Player2_Shoot;
        public InputAction @Hyperspace => m_Wrapper.m_Player2_Hyperspace;
        public InputActionMap Get() { return m_Wrapper.m_Player2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player2Actions set) { return set.Get(); }
        public void AddCallbacks(IPlayer2Actions instance)
        {
            if (instance == null || m_Wrapper.m_Player2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player2ActionsCallbackInterfaces.Add(instance);
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @Impulse.started += instance.OnImpulse;
            @Impulse.performed += instance.OnImpulse;
            @Impulse.canceled += instance.OnImpulse;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Hyperspace.started += instance.OnHyperspace;
            @Hyperspace.performed += instance.OnHyperspace;
            @Hyperspace.canceled += instance.OnHyperspace;
        }

        private void UnregisterCallbacks(IPlayer2Actions instance)
        {
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @Impulse.started -= instance.OnImpulse;
            @Impulse.performed -= instance.OnImpulse;
            @Impulse.canceled -= instance.OnImpulse;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Hyperspace.started -= instance.OnHyperspace;
            @Hyperspace.performed -= instance.OnHyperspace;
            @Hyperspace.canceled -= instance.OnHyperspace;
        }

        public void RemoveCallbacks(IPlayer2Actions instance)
        {
            if (m_Wrapper.m_Player2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer2Actions instance)
        {
            foreach (var item in m_Wrapper.m_Player2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player2Actions @Player2 => new Player2Actions(this);

    // Game
    private readonly InputActionMap m_Game;
    private List<IGameActions> m_GameActionsCallbackInterfaces = new List<IGameActions>();
    private readonly InputAction m_Game_Player1Start;
    private readonly InputAction m_Game_Player2Start;
    public struct GameActions
    {
        private @AsteroidsActions m_Wrapper;
        public GameActions(@AsteroidsActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Player1Start => m_Wrapper.m_Game_Player1Start;
        public InputAction @Player2Start => m_Wrapper.m_Game_Player2Start;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void AddCallbacks(IGameActions instance)
        {
            if (instance == null || m_Wrapper.m_GameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActionsCallbackInterfaces.Add(instance);
            @Player1Start.started += instance.OnPlayer1Start;
            @Player1Start.performed += instance.OnPlayer1Start;
            @Player1Start.canceled += instance.OnPlayer1Start;
            @Player2Start.started += instance.OnPlayer2Start;
            @Player2Start.performed += instance.OnPlayer2Start;
            @Player2Start.canceled += instance.OnPlayer2Start;
        }

        private void UnregisterCallbacks(IGameActions instance)
        {
            @Player1Start.started -= instance.OnPlayer1Start;
            @Player1Start.performed -= instance.OnPlayer1Start;
            @Player1Start.canceled -= instance.OnPlayer1Start;
            @Player2Start.started -= instance.OnPlayer2Start;
            @Player2Start.performed -= instance.OnPlayer2Start;
            @Player2Start.canceled -= instance.OnPlayer2Start;
        }

        public void RemoveCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions instance)
        {
            foreach (var item in m_Wrapper.m_GameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions @Game => new GameActions(this);

    // End
    private readonly InputActionMap m_End;
    private List<IEndActions> m_EndActionsCallbackInterfaces = new List<IEndActions>();
    private readonly InputAction m_End_Continue;
    public struct EndActions
    {
        private @AsteroidsActions m_Wrapper;
        public EndActions(@AsteroidsActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Continue => m_Wrapper.m_End_Continue;
        public InputActionMap Get() { return m_Wrapper.m_End; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EndActions set) { return set.Get(); }
        public void AddCallbacks(IEndActions instance)
        {
            if (instance == null || m_Wrapper.m_EndActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EndActionsCallbackInterfaces.Add(instance);
            @Continue.started += instance.OnContinue;
            @Continue.performed += instance.OnContinue;
            @Continue.canceled += instance.OnContinue;
        }

        private void UnregisterCallbacks(IEndActions instance)
        {
            @Continue.started -= instance.OnContinue;
            @Continue.performed -= instance.OnContinue;
            @Continue.canceled -= instance.OnContinue;
        }

        public void RemoveCallbacks(IEndActions instance)
        {
            if (m_Wrapper.m_EndActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEndActions instance)
        {
            foreach (var item in m_Wrapper.m_EndActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EndActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EndActions @End => new EndActions(this);
    public interface IPlayer1Actions
    {
        void OnRotation(InputAction.CallbackContext context);
        void OnImpulse(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnHyperspace(InputAction.CallbackContext context);
    }
    public interface IPlayer2Actions
    {
        void OnRotation(InputAction.CallbackContext context);
        void OnImpulse(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnHyperspace(InputAction.CallbackContext context);
    }
    public interface IGameActions
    {
        void OnPlayer1Start(InputAction.CallbackContext context);
        void OnPlayer2Start(InputAction.CallbackContext context);
    }
    public interface IEndActions
    {
        void OnContinue(InputAction.CallbackContext context);
    }
}
